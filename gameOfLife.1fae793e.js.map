{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"gameOfLife.1fae793e.js","sourceRoot":"..","sourcesContent":["class Grid {\r\n    private gridState: { state: number, y: number, x: number, liveNeighbors: number }[][] = [];\r\n    canvas: CanvasRenderingContext2D = document.getElementById(\"myCanvas\").getContext(\"2d\");;\r\n\r\n    private set generation(val) {\r\n        document.querySelector('.generation').textContent = `GEN: ${val}`\r\n    };\r\n\r\n    private set alive(val) {\r\n        document.querySelector('.alive').textContent = `Cells Alive: ${val}`\r\n    };\r\n\r\n    private _generation = 1;\r\n    private interval;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.createGrid(x, y);\r\n        this.checkState();\r\n        this.updateCells();\r\n    }\r\n\r\n    public reset(x: number, y: number) {\r\n        this.canvas.clearRect(0, 0, 1500, 800);\r\n        this.gridState = [];\r\n        this.createGrid(x, y);\r\n        this.updateCells();\r\n        this._generation = 1;\r\n        this.generation = 1;\r\n        window.clearInterval(this.interval);\r\n    }\r\n\r\n    public start() {\r\n        this.interval = window.setInterval(() => {\r\n            this.checkState();\r\n            this.updateCells();\r\n            this._generation++;\r\n            this.generation = this._generation;\r\n        }, 100)\r\n    }\r\n\r\n    public step() {\r\n        this.checkState();\r\n        this.updateCells();\r\n        this._generation++;\r\n        this.generation = this._generation;\r\n    }\r\n\r\n    private createGrid(x: number, y: number) {\r\n        for (let i = 0; i < y; i++) {\r\n            const row = [];\r\n            for (let j = 0; j < x; j++) {\r\n                const state = Math.floor(Math.random() * 100);\r\n                row.push({ state: state > 4 ? 0 : 1, y: i, x: j });\r\n            }\r\n            this.gridState.push(row);\r\n        }\r\n\r\n    }\r\n\r\n    private toggle(x, y, val, color?) {\r\n\r\n        if (val === 1) {\r\n            this.canvas.beginPath();\r\n            this.canvas.rect(x, y, 1, 1);\r\n            this.canvas.fillStyle = color //|| \"white\";\r\n            this.canvas.fill();\r\n        } else {\r\n            this.canvas.beginPath();\r\n            this.canvas.rect(x, y, 1, 1);\r\n            this.canvas.fillStyle = \"black\";\r\n            this.canvas.fill();\r\n        }\r\n    }\r\n\r\n    private checkState() {\r\n        let alive = 0;\r\n        for (let i = 0; i < this.gridState.length; i++) {\r\n            for (let j = 0; j < this.gridState[i].length; j++) {\r\n                const cell = this.gridState[i][j];\r\n                alive += cell.state;\r\n                let liveNeighbors = 0;\r\n\r\n                liveNeighbors += this.gridState?.[i - 1]?.[j]?.state; //top center\r\n                liveNeighbors += this.gridState?.[i - 1]?.[j - 1]?.state; //top left\r\n                liveNeighbors += this.gridState?.[i - 1]?.[j + 1]?.state; //top right\r\n                liveNeighbors += this.gridState?.[i]?.[j + 1]?.state || 0; //middle right\r\n                liveNeighbors += this.gridState?.[i]?.[j - 1]?.state || 0; //middle left\r\n                liveNeighbors += this.gridState?.[i + 1]?.[j]?.state; //bottom center\r\n                liveNeighbors += this.gridState?.[i + 1]?.[j - 1]?.state; //bottom left\r\n                liveNeighbors += this.gridState?.[i + 1]?.[j + 1]?.state; //bottom right\r\n\r\n                cell.liveNeighbors = liveNeighbors;\r\n\r\n            }\r\n        }\r\n        this.alive = alive;\r\n\r\n    }\r\n\r\n    private updateCells() {\r\n        this.canvas.clearRect(0, 0, 400, 400); //this should clear the canvas ahead of each redraw\r\n\r\n        for (let i = 0; i < this.gridState.length; i++) {\r\n            for (let j = 0; j < this.gridState[i].length; j++) {\r\n                const cell = this.gridState[i][j];\r\n\r\n                if (cell.liveNeighbors === 3 && cell.state === 0) { // cell is born again 3\r\n                    cell.state = 1;\r\n                    this.toggle(j, i, cell.state, 'red')\r\n                }\r\n\r\n                else if ((cell.liveNeighbors === 2 || cell.liveNeighbors === 3)  && cell.state) { // lives on if 2 or 3\r\n                    cell.state = 1;\r\n                    this.toggle(j, i, cell.state, 'white');\r\n                }\r\n                else if (cell.liveNeighbors > 3 && cell.state) { // overpopulation \r\n                    cell.state = 0;\r\n                    this.toggle(j, i, cell.state);\r\n                }\r\n\r\n                else if (cell.liveNeighbors < 2 && cell.state) { // less than 2 underpop\r\n                    cell.state = 0;\r\n                    this.toggle(j, i, cell.state, 'green');\r\n                }\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst grid = new Grid(1500, 800);\r\n\r\n\r\ndocument.getElementsByClassName('reset')[0].addEventListener('click', () => {\r\n    grid.reset(1500, 800);\r\n})\r\n\r\ndocument.getElementsByClassName('step')[0].addEventListener('click', () => {\r\n    grid.step();\r\n})\r\n\r\ndocument.getElementsByClassName('start')[0].addEventListener('click', () => {\r\n    grid.start();\r\n})\r\n\r\n"]}